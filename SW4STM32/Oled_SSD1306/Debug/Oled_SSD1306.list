
Oled_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001438  08001438  00011438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001470  08001470  00011470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001474  08001474  00011474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000644e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000ed68  00000000  00000000  0002648a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001bc0  00000000  00000000  000351f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000668  00000000  00000000  00036db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000648  00000000  00000000  00037420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001cbbe  00000000  00000000  00037a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009eaa1  00000000  00000000  00054626  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000f30c7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000010a8  00000000  00000000  000f3144  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00005c21  00000000  00000000  000f41ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001420 	.word	0x08001420

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001420 	.word	0x08001420

080001d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800020c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001da:	e003      	b.n	80001e4 <LoopCopyDataInit>

080001dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001e2:	3104      	adds	r1, #4

080001e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001e4:	480b      	ldr	r0, [pc, #44]	; (8000214 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001e6:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <LoopForever+0xe>)
	adds	r2, r0, r1
 80001e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001ec:	d3f6      	bcc.n	80001dc <CopyDataInit>
	ldr	r2, =_sbss
 80001ee:	4a0b      	ldr	r2, [pc, #44]	; (800021c <LoopForever+0x12>)
	b	LoopFillZerobss
 80001f0:	e002      	b.n	80001f8 <LoopFillZerobss>

080001f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001f4:	f842 3b04 	str.w	r3, [r2], #4

080001f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <LoopForever+0x16>)
	cmp	r2, r3
 80001fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001fc:	d3f9      	bcc.n	80001f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001fe:	f000 f8e1 	bl	80003c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000202:	f001 f8e1 	bl	80013c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000206:	f000 f877 	bl	80002f8 <main>

0800020a <LoopForever>:

LoopForever:
    b LoopForever
 800020a:	e7fe      	b.n	800020a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800020c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000210:	08001478 	.word	0x08001478
	ldr	r0, =_sdata
 8000214:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000218:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800021c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000220:	20000078 	.word	0x20000078

08000224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000224:	e7fe      	b.n	8000224 <ADC1_2_IRQHandler>
	...

08000228 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000228:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800022a:	4b06      	ldr	r3, [pc, #24]	; (8000244 <_ZL12MX_GPIO_Initv+0x1c>)
 800022c:	695a      	ldr	r2, [r3, #20]
 800022e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000232:	615a      	str	r2, [r3, #20]
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800023a:	9301      	str	r3, [sp, #4]
 800023c:	9b01      	ldr	r3, [sp, #4]

}
 800023e:	b002      	add	sp, #8
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000

08000248 <_ZL12MX_I2C1_Initv>:
{
 8000248:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 800024a:	4c0d      	ldr	r4, [pc, #52]	; (8000280 <_ZL12MX_I2C1_Initv+0x38>)
 800024c:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <_ZL12MX_I2C1_Initv+0x3c>)
 800024e:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <_ZL12MX_I2C1_Initv+0x40>)
 8000252:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000254:	2500      	movs	r5, #0
 8000256:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000258:	2301      	movs	r3, #1
 800025a:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800025c:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800025e:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000260:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000262:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000264:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000266:	4620      	mov	r0, r4
 8000268:	f000 fa5c 	bl	8000724 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800026c:	4629      	mov	r1, r5
 800026e:	4620      	mov	r0, r4
 8000270:	f000 fab6 	bl	80007e0 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000274:	4629      	mov	r1, r5
 8000276:	4620      	mov	r0, r4
 8000278:	f000 fae0 	bl	800083c <HAL_I2CEx_ConfigDigitalFilter>
 800027c:	bd38      	pop	{r3, r4, r5, pc}
 800027e:	bf00      	nop
 8000280:	20000028 	.word	0x20000028
 8000284:	40005400 	.word	0x40005400
 8000288:	2000090e 	.word	0x2000090e

0800028c <_Z18SystemClock_Configv>:
{
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000290:	2228      	movs	r2, #40	; 0x28
 8000292:	2100      	movs	r1, #0
 8000294:	a81c      	add	r0, sp, #112	; 0x70
 8000296:	f001 f8bb 	bl	8001410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	2400      	movs	r4, #0
 800029c:	9417      	str	r4, [sp, #92]	; 0x5c
 800029e:	9418      	str	r4, [sp, #96]	; 0x60
 80002a0:	9419      	str	r4, [sp, #100]	; 0x64
 80002a2:	941a      	str	r4, [sp, #104]	; 0x68
 80002a4:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a6:	2258      	movs	r2, #88	; 0x58
 80002a8:	4621      	mov	r1, r4
 80002aa:	a801      	add	r0, sp, #4
 80002ac:	f001 f8b0 	bl	8001410 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	2502      	movs	r5, #2
 80002b2:	951c      	str	r5, [sp, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b8:	2310      	movs	r3, #16
 80002ba:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002bc:	9522      	str	r5, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002c2:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c8:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	a81c      	add	r0, sp, #112	; 0x70
 80002cc:	f000 fae2 	bl	8000894 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d4:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002dc:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e0:	4629      	mov	r1, r5
 80002e2:	a817      	add	r0, sp, #92	; 0x5c
 80002e4:	f000 fe1c 	bl	8000f20 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002e8:	2320      	movs	r3, #32
 80002ea:	9301      	str	r3, [sp, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002ec:	9408      	str	r4, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ee:	a801      	add	r0, sp, #4
 80002f0:	f000 fee6 	bl	80010c0 <HAL_RCCEx_PeriphCLKConfig>
}
 80002f4:	b027      	add	sp, #156	; 0x9c
 80002f6:	bd30      	pop	{r4, r5, pc}

080002f8 <main>:
{
 80002f8:	b508      	push	{r3, lr}
  HAL_Init();
 80002fa:	f000 f8bb 	bl	8000474 <HAL_Init>
  SystemClock_Config();
 80002fe:	f7ff ffc5 	bl	800028c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8000302:	f7ff ff91 	bl	8000228 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000306:	f7ff ff9f 	bl	8000248 <_ZL12MX_I2C1_Initv>
 800030a:	e7fe      	b.n	800030a <main+0x12>

0800030c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800030c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <HAL_MspInit+0x2c>)
 8000310:	699a      	ldr	r2, [r3, #24]
 8000312:	f042 0201 	orr.w	r2, r2, #1
 8000316:	619a      	str	r2, [r3, #24]
 8000318:	699a      	ldr	r2, [r3, #24]
 800031a:	f002 0201 	and.w	r2, r2, #1
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000322:	69da      	ldr	r2, [r3, #28]
 8000324:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000328:	61da      	str	r2, [r3, #28]
 800032a:	69db      	ldr	r3, [r3, #28]
 800032c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000334:	b002      	add	sp, #8
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000

0800033c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800033c:	b510      	push	{r4, lr}
 800033e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000340:	2300      	movs	r3, #0
 8000342:	9303      	str	r3, [sp, #12]
 8000344:	9304      	str	r3, [sp, #16]
 8000346:	9305      	str	r3, [sp, #20]
 8000348:	9306      	str	r3, [sp, #24]
 800034a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 800034c:	6802      	ldr	r2, [r0, #0]
 800034e:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <HAL_I2C_MspInit+0x64>)
 8000350:	429a      	cmp	r2, r3
 8000352:	d001      	beq.n	8000358 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000354:	b008      	add	sp, #32
 8000356:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000358:	4c12      	ldr	r4, [pc, #72]	; (80003a4 <HAL_I2C_MspInit+0x68>)
 800035a:	6963      	ldr	r3, [r4, #20]
 800035c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000360:	6163      	str	r3, [r4, #20]
 8000362:	6963      	ldr	r3, [r4, #20]
 8000364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000368:	9301      	str	r3, [sp, #4]
 800036a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800036c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000370:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000372:	2312      	movs	r3, #18
 8000374:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000376:	2301      	movs	r3, #1
 8000378:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800037a:	2303      	movs	r3, #3
 800037c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800037e:	2304      	movs	r3, #4
 8000380:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000382:	a903      	add	r1, sp, #12
 8000384:	4808      	ldr	r0, [pc, #32]	; (80003a8 <HAL_I2C_MspInit+0x6c>)
 8000386:	f000 f8f3 	bl	8000570 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800038a:	69e3      	ldr	r3, [r4, #28]
 800038c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000390:	61e3      	str	r3, [r4, #28]
 8000392:	69e3      	ldr	r3, [r4, #28]
 8000394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000398:	9302      	str	r3, [sp, #8]
 800039a:	9b02      	ldr	r3, [sp, #8]
}
 800039c:	e7da      	b.n	8000354 <HAL_I2C_MspInit+0x18>
 800039e:	bf00      	nop
 80003a0:	40005400 	.word	0x40005400
 80003a4:	40021000 	.word	0x40021000
 80003a8:	48000400 	.word	0x48000400

080003ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ac:	4770      	bx	lr

080003ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ae:	e7fe      	b.n	80003ae <HardFault_Handler>

080003b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b0:	e7fe      	b.n	80003b0 <MemManage_Handler>

080003b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b2:	e7fe      	b.n	80003b2 <BusFault_Handler>

080003b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b4:	e7fe      	b.n	80003b4 <UsageFault_Handler>

080003b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003b6:	4770      	bx	lr

080003b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b8:	4770      	bx	lr

080003ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ba:	4770      	bx	lr

080003bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003be:	f000 f86b 	bl	8000498 <HAL_IncTick>
 80003c2:	bd08      	pop	{r3, pc}

080003c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c4:	4915      	ldr	r1, [pc, #84]	; (800041c <SystemInit+0x58>)
 80003c6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80003ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80003d2:	4b13      	ldr	r3, [pc, #76]	; (8000420 <SystemInit+0x5c>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	f042 0201 	orr.w	r2, r2, #1
 80003da:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80003dc:	6858      	ldr	r0, [r3, #4]
 80003de:	4a11      	ldr	r2, [pc, #68]	; (8000424 <SystemInit+0x60>)
 80003e0:	4002      	ands	r2, r0
 80003e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80003ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80003ee:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80003f6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80003f8:	685a      	ldr	r2, [r3, #4]
 80003fa:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80003fe:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000402:	f022 020f 	bic.w	r2, r2, #15
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000408:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800040a:	4a07      	ldr	r2, [pc, #28]	; (8000428 <SystemInit+0x64>)
 800040c:	4002      	ands	r2, r0
 800040e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000414:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000418:	608b      	str	r3, [r1, #8]
 800041a:	4770      	bx	lr
 800041c:	e000ed00 	.word	0xe000ed00
 8000420:	40021000 	.word	0x40021000
 8000424:	f87fc00c 	.word	0xf87fc00c
 8000428:	ff00fccc 	.word	0xff00fccc

0800042c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800042c:	b510      	push	{r4, lr}
 800042e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <HAL_InitTick+0x40>)
 8000432:	7818      	ldrb	r0, [r3, #0]
 8000434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000438:	fbb3 f3f0 	udiv	r3, r3, r0
 800043c:	4a0c      	ldr	r2, [pc, #48]	; (8000470 <HAL_InitTick+0x44>)
 800043e:	6810      	ldr	r0, [r2, #0]
 8000440:	fbb0 f0f3 	udiv	r0, r0, r3
 8000444:	f000 f87e 	bl	8000544 <HAL_SYSTICK_Config>
 8000448:	b968      	cbnz	r0, 8000466 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800044a:	2c0f      	cmp	r4, #15
 800044c:	d901      	bls.n	8000452 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800044e:	2001      	movs	r0, #1
  }
   /* Return function status */
  return HAL_OK;
}
 8000450:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000452:	2200      	movs	r2, #0
 8000454:	4621      	mov	r1, r4
 8000456:	f04f 30ff 	mov.w	r0, #4294967295
 800045a:	f000 f841 	bl	80004e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800045e:	4b03      	ldr	r3, [pc, #12]	; (800046c <HAL_InitTick+0x40>)
 8000460:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	bf00      	nop
 800046c:	20000004 	.word	0x20000004
 8000470:	20000000 	.word	0x20000000

08000474 <HAL_Init>:
{
 8000474:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000476:	4a07      	ldr	r2, [pc, #28]	; (8000494 <HAL_Init+0x20>)
 8000478:	6813      	ldr	r3, [r2, #0]
 800047a:	f043 0310 	orr.w	r3, r3, #16
 800047e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000480:	2003      	movs	r0, #3
 8000482:	f000 f81b 	bl	80004bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000486:	2000      	movs	r0, #0
 8000488:	f7ff ffd0 	bl	800042c <HAL_InitTick>
  HAL_MspInit();
 800048c:	f7ff ff3e 	bl	800030c <HAL_MspInit>
}
 8000490:	2000      	movs	r0, #0
 8000492:	bd08      	pop	{r3, pc}
 8000494:	40022000 	.word	0x40022000

08000498 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000498:	4a03      	ldr	r2, [pc, #12]	; (80004a8 <HAL_IncTick+0x10>)
 800049a:	6811      	ldr	r1, [r2, #0]
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <HAL_IncTick+0x14>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	440b      	add	r3, r1
 80004a2:	6013      	str	r3, [r2, #0]
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000074 	.word	0x20000074
 80004ac:	20000004 	.word	0x20000004

080004b0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80004b0:	4b01      	ldr	r3, [pc, #4]	; (80004b8 <HAL_GetTick+0x8>)
 80004b2:	6818      	ldr	r0, [r3, #0]
}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	20000074 	.word	0x20000074

080004bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004bc:	4a07      	ldr	r2, [pc, #28]	; (80004dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80004be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004c4:	041b      	lsls	r3, r3, #16
 80004c6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80004c8:	0200      	lsls	r0, r0, #8
 80004ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004ce:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80004d0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80004d4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80004d8:	60d0      	str	r0, [r2, #12]
 80004da:	4770      	bx	lr
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004e0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004e2:	4b16      	ldr	r3, [pc, #88]	; (800053c <HAL_NVIC_SetPriority+0x5c>)
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004ea:	f1c3 0407 	rsb	r4, r3, #7
 80004ee:	2c04      	cmp	r4, #4
 80004f0:	bf28      	it	cs
 80004f2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004f4:	1d1d      	adds	r5, r3, #4
 80004f6:	2d06      	cmp	r5, #6
 80004f8:	d917      	bls.n	800052a <HAL_NVIC_SetPriority+0x4a>
 80004fa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004fc:	2501      	movs	r5, #1
 80004fe:	fa05 f404 	lsl.w	r4, r5, r4
 8000502:	3c01      	subs	r4, #1
 8000504:	4021      	ands	r1, r4
 8000506:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000508:	fa05 f303 	lsl.w	r3, r5, r3
 800050c:	3b01      	subs	r3, #1
 800050e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000510:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000512:	2800      	cmp	r0, #0
 8000514:	db0b      	blt.n	800052e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000516:	0109      	lsls	r1, r1, #4
 8000518:	b2c9      	uxtb	r1, r1
 800051a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800051e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000522:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000526:	bc30      	pop	{r4, r5}
 8000528:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800052a:	2300      	movs	r3, #0
 800052c:	e7e6      	b.n	80004fc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052e:	f000 000f 	and.w	r0, r0, #15
 8000532:	0109      	lsls	r1, r1, #4
 8000534:	b2c9      	uxtb	r1, r1
 8000536:	4b02      	ldr	r3, [pc, #8]	; (8000540 <HAL_NVIC_SetPriority+0x60>)
 8000538:	5419      	strb	r1, [r3, r0]
 800053a:	e7f4      	b.n	8000526 <HAL_NVIC_SetPriority+0x46>
 800053c:	e000ed00 	.word	0xe000ed00
 8000540:	e000ed14 	.word	0xe000ed14

08000544 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000544:	3801      	subs	r0, #1
 8000546:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800054a:	d20a      	bcs.n	8000562 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_SYSTICK_Config+0x24>)
 800054e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000550:	21f0      	movs	r1, #240	; 0xf0
 8000552:	4a06      	ldr	r2, [pc, #24]	; (800056c <HAL_SYSTICK_Config+0x28>)
 8000554:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000558:	2000      	movs	r0, #0
 800055a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800055c:	2207      	movs	r2, #7
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000562:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000e010 	.word	0xe000e010
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8000574:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000576:	e093      	b.n	80006a0 <HAL_GPIO_Init+0x130>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000578:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800057c:	f10e 0e08 	add.w	lr, lr, #8
 8000580:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000584:	f003 0607 	and.w	r6, r3, #7
 8000588:	00b6      	lsls	r6, r6, #2
 800058a:	270f      	movs	r7, #15
 800058c:	40b7      	lsls	r7, r6
 800058e:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000592:	690f      	ldr	r7, [r1, #16]
 8000594:	fa07 f606 	lsl.w	r6, r7, r6
 8000598:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3] = temp;
 800059a:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
 800059e:	e08e      	b.n	80006be <HAL_GPIO_Init+0x14e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005a0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005a2:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005a4:	68cf      	ldr	r7, [r1, #12]
 80005a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80005aa:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80005ac:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005ae:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005b0:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005b4:	684e      	ldr	r6, [r1, #4]
 80005b6:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80005ba:	409e      	lsls	r6, r3
 80005bc:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80005be:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005c0:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005c2:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005c4:	688d      	ldr	r5, [r1, #8]
 80005c6:	fa05 f50e 	lsl.w	r5, r5, lr
 80005ca:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80005cc:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005ce:	684c      	ldr	r4, [r1, #4]
 80005d0:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80005d4:	d063      	beq.n	800069e <HAL_GPIO_Init+0x12e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4c4f      	ldr	r4, [pc, #316]	; (8000714 <HAL_GPIO_Init+0x1a4>)
 80005d8:	69a5      	ldr	r5, [r4, #24]
 80005da:	f045 0501 	orr.w	r5, r5, #1
 80005de:	61a5      	str	r5, [r4, #24]
 80005e0:	69a4      	ldr	r4, [r4, #24]
 80005e2:	f004 0401 	and.w	r4, r4, #1
 80005e6:	9401      	str	r4, [sp, #4]
 80005e8:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 80005ea:	089c      	lsrs	r4, r3, #2
 80005ec:	1ca6      	adds	r6, r4, #2
 80005ee:	4d4a      	ldr	r5, [pc, #296]	; (8000718 <HAL_GPIO_Init+0x1a8>)
 80005f0:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80005f4:	f003 0603 	and.w	r6, r3, #3
 80005f8:	00b7      	lsls	r7, r6, #2
 80005fa:	260f      	movs	r6, #15
 80005fc:	40be      	lsls	r6, r7
 80005fe:	ea25 0506 	bic.w	r5, r5, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000602:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000606:	d077      	beq.n	80006f8 <HAL_GPIO_Init+0x188>
 8000608:	4e44      	ldr	r6, [pc, #272]	; (800071c <HAL_GPIO_Init+0x1ac>)
 800060a:	42b0      	cmp	r0, r6
 800060c:	d076      	beq.n	80006fc <HAL_GPIO_Init+0x18c>
 800060e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000612:	42b0      	cmp	r0, r6
 8000614:	d074      	beq.n	8000700 <HAL_GPIO_Init+0x190>
 8000616:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800061a:	42b0      	cmp	r0, r6
 800061c:	d072      	beq.n	8000704 <HAL_GPIO_Init+0x194>
 800061e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000622:	42b0      	cmp	r0, r6
 8000624:	d070      	beq.n	8000708 <HAL_GPIO_Init+0x198>
 8000626:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800062a:	42b0      	cmp	r0, r6
 800062c:	d06e      	beq.n	800070c <HAL_GPIO_Init+0x19c>
 800062e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000632:	42b0      	cmp	r0, r6
 8000634:	d05e      	beq.n	80006f4 <HAL_GPIO_Init+0x184>
 8000636:	2607      	movs	r6, #7
 8000638:	40be      	lsls	r6, r7
 800063a:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 800063c:	3402      	adds	r4, #2
 800063e:	4e36      	ldr	r6, [pc, #216]	; (8000718 <HAL_GPIO_Init+0x1a8>)
 8000640:	f846 5024 	str.w	r5, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000644:	4c36      	ldr	r4, [pc, #216]	; (8000720 <HAL_GPIO_Init+0x1b0>)
 8000646:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000648:	43d4      	mvns	r4, r2
 800064a:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800064e:	684f      	ldr	r7, [r1, #4]
 8000650:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000654:	d001      	beq.n	800065a <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8000656:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 800065a:	4d31      	ldr	r5, [pc, #196]	; (8000720 <HAL_GPIO_Init+0x1b0>)
 800065c:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800065e:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000660:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000664:	684f      	ldr	r7, [r1, #4]
 8000666:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800066a:	d001      	beq.n	8000670 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 800066c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8000670:	4d2b      	ldr	r5, [pc, #172]	; (8000720 <HAL_GPIO_Init+0x1b0>)
 8000672:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000674:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000676:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067a:	684f      	ldr	r7, [r1, #4]
 800067c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000680:	d001      	beq.n	8000686 <HAL_GPIO_Init+0x116>
        {
          temp |= iocurrent;
 8000682:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8000686:	4d26      	ldr	r5, [pc, #152]	; (8000720 <HAL_GPIO_Init+0x1b0>)
 8000688:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 800068a:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 800068c:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800068e:	684e      	ldr	r6, [r1, #4]
 8000690:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000694:	d001      	beq.n	800069a <HAL_GPIO_Init+0x12a>
        {
          temp |= iocurrent;
 8000696:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 800069a:	4a21      	ldr	r2, [pc, #132]	; (8000720 <HAL_GPIO_Init+0x1b0>)
 800069c:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 800069e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006a0:	680a      	ldr	r2, [r1, #0]
 80006a2:	fa32 f403 	lsrs.w	r4, r2, r3
 80006a6:	d033      	beq.n	8000710 <HAL_GPIO_Init+0x1a0>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006a8:	2501      	movs	r5, #1
 80006aa:	409d      	lsls	r5, r3
    if(iocurrent)
 80006ac:	402a      	ands	r2, r5
 80006ae:	d0f6      	beq.n	800069e <HAL_GPIO_Init+0x12e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006b0:	684c      	ldr	r4, [r1, #4]
 80006b2:	2c02      	cmp	r4, #2
 80006b4:	f43f af60 	beq.w	8000578 <HAL_GPIO_Init+0x8>
 80006b8:	2c12      	cmp	r4, #18
 80006ba:	f43f af5d 	beq.w	8000578 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80006be:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006c0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006c4:	2403      	movs	r4, #3
 80006c6:	fa04 f40e 	lsl.w	r4, r4, lr
 80006ca:	43e4      	mvns	r4, r4
 80006cc:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ce:	684f      	ldr	r7, [r1, #4]
 80006d0:	f007 0703 	and.w	r7, r7, #3
 80006d4:	fa07 f70e 	lsl.w	r7, r7, lr
 80006d8:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80006da:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006dc:	684e      	ldr	r6, [r1, #4]
 80006de:	1e77      	subs	r7, r6, #1
 80006e0:	2f01      	cmp	r7, #1
 80006e2:	f67f af5d 	bls.w	80005a0 <HAL_GPIO_Init+0x30>
 80006e6:	2e11      	cmp	r6, #17
 80006e8:	f43f af5a 	beq.w	80005a0 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006ec:	2e12      	cmp	r6, #18
 80006ee:	f47f af67 	bne.w	80005c0 <HAL_GPIO_Init+0x50>
 80006f2:	e755      	b.n	80005a0 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80006f4:	2606      	movs	r6, #6
 80006f6:	e79f      	b.n	8000638 <HAL_GPIO_Init+0xc8>
 80006f8:	2600      	movs	r6, #0
 80006fa:	e79d      	b.n	8000638 <HAL_GPIO_Init+0xc8>
 80006fc:	2601      	movs	r6, #1
 80006fe:	e79b      	b.n	8000638 <HAL_GPIO_Init+0xc8>
 8000700:	2602      	movs	r6, #2
 8000702:	e799      	b.n	8000638 <HAL_GPIO_Init+0xc8>
 8000704:	2603      	movs	r6, #3
 8000706:	e797      	b.n	8000638 <HAL_GPIO_Init+0xc8>
 8000708:	2604      	movs	r6, #4
 800070a:	e795      	b.n	8000638 <HAL_GPIO_Init+0xc8>
 800070c:	2605      	movs	r6, #5
 800070e:	e793      	b.n	8000638 <HAL_GPIO_Init+0xc8>
  }
}
 8000710:	b003      	add	sp, #12
 8000712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	40010000 	.word	0x40010000
 800071c:	48000400 	.word	0x48000400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000724:	2800      	cmp	r0, #0
 8000726:	d059      	beq.n	80007dc <HAL_I2C_Init+0xb8>
{
 8000728:	b510      	push	{r4, lr}
 800072a:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800072c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000730:	2b00      	cmp	r3, #0
 8000732:	d043      	beq.n	80007bc <HAL_I2C_Init+0x98>

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000734:	2324      	movs	r3, #36	; 0x24
 8000736:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800073a:	6822      	ldr	r2, [r4, #0]
 800073c:	6813      	ldr	r3, [r2, #0]
 800073e:	f023 0301 	bic.w	r3, r3, #1
 8000742:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000744:	6822      	ldr	r2, [r4, #0]
 8000746:	6863      	ldr	r3, [r4, #4]
 8000748:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800074c:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800074e:	6822      	ldr	r2, [r4, #0]
 8000750:	6893      	ldr	r3, [r2, #8]
 8000752:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000756:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000758:	68e3      	ldr	r3, [r4, #12]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d033      	beq.n	80007c6 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800075e:	6822      	ldr	r2, [r4, #0]
 8000760:	68a3      	ldr	r3, [r4, #8]
 8000762:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8000766:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000768:	68e3      	ldr	r3, [r4, #12]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d031      	beq.n	80007d2 <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800076e:	6822      	ldr	r2, [r4, #0]
 8000770:	6853      	ldr	r3, [r2, #4]
 8000772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800077a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800077c:	6822      	ldr	r2, [r4, #0]
 800077e:	68d3      	ldr	r3, [r2, #12]
 8000780:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000784:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000786:	6822      	ldr	r2, [r4, #0]
 8000788:	6923      	ldr	r3, [r4, #16]
 800078a:	6961      	ldr	r1, [r4, #20]
 800078c:	430b      	orrs	r3, r1
 800078e:	69a1      	ldr	r1, [r4, #24]
 8000790:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000794:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000796:	6822      	ldr	r2, [r4, #0]
 8000798:	69e3      	ldr	r3, [r4, #28]
 800079a:	6a21      	ldr	r1, [r4, #32]
 800079c:	430b      	orrs	r3, r1
 800079e:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80007a0:	6822      	ldr	r2, [r4, #0]
 80007a2:	6813      	ldr	r3, [r2, #0]
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007aa:	2000      	movs	r0, #0
 80007ac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80007ae:	2320      	movs	r3, #32
 80007b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80007b4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80007b6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 80007ba:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80007bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80007c0:	f7ff fdbc 	bl	800033c <HAL_I2C_MspInit>
 80007c4:	e7b6      	b.n	8000734 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80007c6:	6822      	ldr	r2, [r4, #0]
 80007c8:	68a3      	ldr	r3, [r4, #8]
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ce:	6093      	str	r3, [r2, #8]
 80007d0:	e7ca      	b.n	8000768 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80007d2:	6823      	ldr	r3, [r4, #0]
 80007d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	e7c8      	b.n	800076e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80007dc:	2001      	movs	r0, #1
 80007de:	4770      	bx	lr

080007e0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80007e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b20      	cmp	r3, #32
 80007e8:	d001      	beq.n	80007ee <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80007ea:	2002      	movs	r0, #2
 80007ec:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80007ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d020      	beq.n	8000838 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80007f6:	2301      	movs	r3, #1
 80007f8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80007fc:	2324      	movs	r3, #36	; 0x24
 80007fe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8000802:	6802      	ldr	r2, [r0, #0]
 8000804:	6813      	ldr	r3, [r2, #0]
 8000806:	f023 0301 	bic.w	r3, r3, #1
 800080a:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800080c:	6802      	ldr	r2, [r0, #0]
 800080e:	6813      	ldr	r3, [r2, #0]
 8000810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000814:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000816:	6802      	ldr	r2, [r0, #0]
 8000818:	6813      	ldr	r3, [r2, #0]
 800081a:	4319      	orrs	r1, r3
 800081c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800081e:	6802      	ldr	r2, [r0, #0]
 8000820:	6813      	ldr	r3, [r2, #0]
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000828:	2320      	movs	r3, #32
 800082a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800082e:	2300      	movs	r3, #0
 8000830:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8000834:	4618      	mov	r0, r3
 8000836:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8000838:	2002      	movs	r0, #2
  }
}
 800083a:	4770      	bx	lr

0800083c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800083c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b20      	cmp	r3, #32
 8000844:	d001      	beq.n	800084a <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000846:	2002      	movs	r0, #2
 8000848:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800084a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800084e:	2b01      	cmp	r3, #1
 8000850:	d01e      	beq.n	8000890 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8000852:	2301      	movs	r3, #1
 8000854:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000858:	2324      	movs	r3, #36	; 0x24
 800085a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800085e:	6802      	ldr	r2, [r0, #0]
 8000860:	6813      	ldr	r3, [r2, #0]
 8000862:	f023 0301 	bic.w	r3, r3, #1
 8000866:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8000868:	6802      	ldr	r2, [r0, #0]
 800086a:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800086c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8000870:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8000874:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000876:	6802      	ldr	r2, [r0, #0]
 8000878:	6813      	ldr	r3, [r2, #0]
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000880:	2320      	movs	r3, #32
 8000882:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000886:	2300      	movs	r3, #0
 8000888:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 800088c:	4618      	mov	r0, r3
 800088e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8000890:	2002      	movs	r0, #2
  }
}
 8000892:	4770      	bx	lr

08000894 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000894:	2800      	cmp	r0, #0
 8000896:	f000 82f7 	beq.w	8000e88 <HAL_RCC_OscConfig+0x5f4>
{
 800089a:	b570      	push	{r4, r5, r6, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008a0:	6803      	ldr	r3, [r0, #0]
 80008a2:	f013 0f01 	tst.w	r3, #1
 80008a6:	d05e      	beq.n	8000966 <HAL_RCC_OscConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008a8:	4bb3      	ldr	r3, [pc, #716]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f003 030c 	and.w	r3, r3, #12
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d041      	beq.n	8000938 <HAL_RCC_OscConfig+0xa4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008b4:	4bb0      	ldr	r3, [pc, #704]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f003 030c 	and.w	r3, r3, #12
 80008bc:	2b08      	cmp	r3, #8
 80008be:	d034      	beq.n	800092a <HAL_RCC_OscConfig+0x96>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c0:	6863      	ldr	r3, [r4, #4]
 80008c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c6:	f000 8089 	beq.w	80009dc <HAL_RCC_OscConfig+0x148>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f040 808c 	bne.w	80009e8 <HAL_RCC_OscConfig+0x154>
 80008d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008d4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008e6:	601a      	str	r2, [r3, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008e8:	6863      	ldr	r3, [r4, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f000 8096 	beq.w	8000a1c <HAL_RCC_OscConfig+0x188>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f0:	f7ff fdde 	bl	80004b0 <HAL_GetTick>
 80008f4:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008fa:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fe:	4b9e      	ldr	r3, [pc, #632]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 8000900:	6819      	ldr	r1, [r3, #0]
 8000902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000906:	fa93 f3a3 	rbit	r3, r3
 800090a:	fab3 f383 	clz	r3, r3
 800090e:	f003 031f 	and.w	r3, r3, #31
 8000912:	2201      	movs	r2, #1
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	4219      	tst	r1, r3
 800091a:	d124      	bne.n	8000966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800091c:	f7ff fdc8 	bl	80004b0 <HAL_GetTick>
 8000920:	1b40      	subs	r0, r0, r5
 8000922:	2864      	cmp	r0, #100	; 0x64
 8000924:	d9e7      	bls.n	80008f6 <HAL_RCC_OscConfig+0x62>
          {
            return HAL_TIMEOUT;
 8000926:	2003      	movs	r0, #3
 8000928:	e2bd      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800092a:	4b93      	ldr	r3, [pc, #588]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000936:	d1c3      	bne.n	80008c0 <HAL_RCC_OscConfig+0x2c>
 8000938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800093c:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000940:	4b8d      	ldr	r3, [pc, #564]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 8000942:	6819      	ldr	r1, [r3, #0]
 8000944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000948:	fa93 f3a3 	rbit	r3, r3
 800094c:	fab3 f383 	clz	r3, r3
 8000950:	f003 031f 	and.w	r3, r3, #31
 8000954:	2201      	movs	r2, #1
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	4219      	tst	r1, r3
 800095c:	d003      	beq.n	8000966 <HAL_RCC_OscConfig+0xd2>
 800095e:	6863      	ldr	r3, [r4, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	f000 8299 	beq.w	8000e98 <HAL_RCC_OscConfig+0x604>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000966:	6823      	ldr	r3, [r4, #0]
 8000968:	f013 0f02 	tst.w	r3, #2
 800096c:	f000 809e 	beq.w	8000aac <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000970:	4b81      	ldr	r3, [pc, #516]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f013 0f0c 	tst.w	r3, #12
 8000978:	d074      	beq.n	8000a64 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800097a:	4b7f      	ldr	r3, [pc, #508]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 030c 	and.w	r3, r3, #12
 8000982:	2b08      	cmp	r3, #8
 8000984:	d067      	beq.n	8000a56 <HAL_RCC_OscConfig+0x1c2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000986:	68e3      	ldr	r3, [r4, #12]
 8000988:	2b00      	cmp	r3, #0
 800098a:	f000 80cd 	beq.w	8000b28 <HAL_RCC_OscConfig+0x294>
 800098e:	2201      	movs	r2, #1
 8000990:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000994:	fab3 f383 	clz	r3, r3
 8000998:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800099c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009a4:	f7ff fd84 	bl	80004b0 <HAL_GetTick>
 80009a8:	4605      	mov	r5, r0
 80009aa:	2302      	movs	r3, #2
 80009ac:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b0:	4b71      	ldr	r3, [pc, #452]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 80009b2:	6819      	ldr	r1, [r3, #0]
 80009b4:	2302      	movs	r3, #2
 80009b6:	fa93 f3a3 	rbit	r3, r3
 80009ba:	fab3 f383 	clz	r3, r3
 80009be:	f003 031f 	and.w	r3, r3, #31
 80009c2:	2201      	movs	r2, #1
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	4219      	tst	r1, r3
 80009ca:	f040 809e 	bne.w	8000b0a <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ce:	f7ff fd6f 	bl	80004b0 <HAL_GetTick>
 80009d2:	1b40      	subs	r0, r0, r5
 80009d4:	2802      	cmp	r0, #2
 80009d6:	d9e8      	bls.n	80009aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80009d8:	2003      	movs	r0, #3
 80009da:	e264      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009dc:	4a66      	ldr	r2, [pc, #408]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 80009de:	6813      	ldr	r3, [r2, #0]
 80009e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e77f      	b.n	80008e8 <HAL_RCC_OscConfig+0x54>
 80009e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009ec:	d009      	beq.n	8000a02 <HAL_RCC_OscConfig+0x16e>
 80009ee:	4b62      	ldr	r3, [pc, #392]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	e772      	b.n	80008e8 <HAL_RCC_OscConfig+0x54>
 8000a02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a06:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	e765      	b.n	80008e8 <HAL_RCC_OscConfig+0x54>
        tickstart = HAL_GetTick();
 8000a1c:	f7ff fd48 	bl	80004b0 <HAL_GetTick>
 8000a20:	4605      	mov	r5, r0
 8000a22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a26:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a2a:	4b53      	ldr	r3, [pc, #332]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 8000a2c:	6819      	ldr	r1, [r3, #0]
 8000a2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a32:	fa93 f3a3 	rbit	r3, r3
 8000a36:	fab3 f383 	clz	r3, r3
 8000a3a:	f003 031f 	and.w	r3, r3, #31
 8000a3e:	2201      	movs	r2, #1
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	4219      	tst	r1, r3
 8000a46:	d08e      	beq.n	8000966 <HAL_RCC_OscConfig+0xd2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a48:	f7ff fd32 	bl	80004b0 <HAL_GetTick>
 8000a4c:	1b40      	subs	r0, r0, r5
 8000a4e:	2864      	cmp	r0, #100	; 0x64
 8000a50:	d9e7      	bls.n	8000a22 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000a52:	2003      	movs	r0, #3
 8000a54:	e227      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a56:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a62:	d190      	bne.n	8000986 <HAL_RCC_OscConfig+0xf2>
 8000a64:	2302      	movs	r3, #2
 8000a66:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a6a:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 8000a6c:	6819      	ldr	r1, [r3, #0]
 8000a6e:	2302      	movs	r3, #2
 8000a70:	fa93 f3a3 	rbit	r3, r3
 8000a74:	fab3 f383 	clz	r3, r3
 8000a78:	f003 031f 	and.w	r3, r3, #31
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	4219      	tst	r1, r3
 8000a84:	d004      	beq.n	8000a90 <HAL_RCC_OscConfig+0x1fc>
 8000a86:	68e3      	ldr	r3, [r4, #12]
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d001      	beq.n	8000a90 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	e20a      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a90:	4839      	ldr	r0, [pc, #228]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 8000a92:	6803      	ldr	r3, [r0, #0]
 8000a94:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a98:	6921      	ldr	r1, [r4, #16]
 8000a9a:	22f8      	movs	r2, #248	; 0xf8
 8000a9c:	fa92 f2a2 	rbit	r2, r2
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	f013 0f08 	tst.w	r3, #8
 8000ab2:	f000 808d 	beq.w	8000bd0 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ab6:	6963      	ldr	r3, [r4, #20]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d061      	beq.n	8000b80 <HAL_RCC_OscConfig+0x2ec>
 8000abc:	2101      	movs	r1, #1
 8000abe:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <HAL_RCC_OscConfig+0x2e8>)
 8000ac8:	4413      	add	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ace:	f7ff fcef 	bl	80004b0 <HAL_GetTick>
 8000ad2:	4605      	mov	r5, r0
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	fa93 f2a3 	rbit	r2, r3
 8000ada:	fa93 f2a3 	rbit	r2, r3
 8000ade:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ae2:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 8000ae4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000ae6:	fa93 f3a3 	rbit	r3, r3
 8000aea:	fab3 f383 	clz	r3, r3
 8000aee:	f003 031f 	and.w	r3, r3, #31
 8000af2:	2201      	movs	r2, #1
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	4219      	tst	r1, r3
 8000afa:	d169      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000afc:	f7ff fcd8 	bl	80004b0 <HAL_GetTick>
 8000b00:	1b40      	subs	r0, r0, r5
 8000b02:	2802      	cmp	r0, #2
 8000b04:	d9e6      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000b06:	2003      	movs	r0, #3
 8000b08:	e1cd      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b0a:	481b      	ldr	r0, [pc, #108]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 8000b0c:	6803      	ldr	r3, [r0, #0]
 8000b0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b12:	6921      	ldr	r1, [r4, #16]
 8000b14:	22f8      	movs	r2, #248	; 0xf8
 8000b16:	fa92 f2a2 	rbit	r2, r2
 8000b1a:	fab2 f282 	clz	r2, r2
 8000b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b22:	4313      	orrs	r3, r2
 8000b24:	6003      	str	r3, [r0, #0]
 8000b26:	e7c1      	b.n	8000aac <HAL_RCC_OscConfig+0x218>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000b2e:	fab3 f383 	clz	r3, r3
 8000b32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b40:	f7ff fcb6 	bl	80004b0 <HAL_GetTick>
 8000b44:	4605      	mov	r5, r0
 8000b46:	2302      	movs	r3, #2
 8000b48:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_RCC_OscConfig+0x2e4>)
 8000b4e:	6819      	ldr	r1, [r3, #0]
 8000b50:	2302      	movs	r3, #2
 8000b52:	fa93 f3a3 	rbit	r3, r3
 8000b56:	fab3 f383 	clz	r3, r3
 8000b5a:	f003 031f 	and.w	r3, r3, #31
 8000b5e:	2201      	movs	r2, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	4219      	tst	r1, r3
 8000b66:	d0a1      	beq.n	8000aac <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b68:	f7ff fca2 	bl	80004b0 <HAL_GetTick>
 8000b6c:	1b40      	subs	r0, r0, r5
 8000b6e:	2802      	cmp	r0, #2
 8000b70:	d9e9      	bls.n	8000b46 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8000b72:	2003      	movs	r0, #3
 8000b74:	e197      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	10908120 	.word	0x10908120
 8000b80:	2201      	movs	r2, #1
 8000b82:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	4bc0      	ldr	r3, [pc, #768]	; (8000e8c <HAL_RCC_OscConfig+0x5f8>)
 8000b8c:	4413      	add	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b94:	f7ff fc8c 	bl	80004b0 <HAL_GetTick>
 8000b98:	4605      	mov	r5, r0
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	fa93 f2a3 	rbit	r2, r3
 8000ba0:	fa93 f2a3 	rbit	r2, r3
 8000ba4:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ba8:	4ab9      	ldr	r2, [pc, #740]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000baa:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000bac:	fa93 f3a3 	rbit	r3, r3
 8000bb0:	fab3 f383 	clz	r3, r3
 8000bb4:	f003 031f 	and.w	r3, r3, #31
 8000bb8:	2201      	movs	r2, #1
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	4219      	tst	r1, r3
 8000bc0:	d006      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bc2:	f7ff fc75 	bl	80004b0 <HAL_GetTick>
 8000bc6:	1b40      	subs	r0, r0, r5
 8000bc8:	2802      	cmp	r0, #2
 8000bca:	d9e6      	bls.n	8000b9a <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000bcc:	2003      	movs	r0, #3
 8000bce:	e16a      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	f013 0f04 	tst.w	r3, #4
 8000bd6:	f000 80b3 	beq.w	8000d40 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bda:	4bad      	ldr	r3, [pc, #692]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000be2:	d10b      	bne.n	8000bfc <HAL_RCC_OscConfig+0x368>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	4baa      	ldr	r3, [pc, #680]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000be6:	69da      	ldr	r2, [r3, #28]
 8000be8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bec:	61da      	str	r2, [r3, #28]
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000bf8:	2501      	movs	r5, #1
 8000bfa:	e000      	b.n	8000bfe <HAL_RCC_OscConfig+0x36a>
    FlagStatus       pwrclkchanged = RESET;
 8000bfc:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bfe:	4ba5      	ldr	r3, [pc, #660]	; (8000e94 <HAL_RCC_OscConfig+0x600>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000c06:	d016      	beq.n	8000c36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c08:	68a3      	ldr	r3, [r4, #8]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d027      	beq.n	8000c5e <HAL_RCC_OscConfig+0x3ca>
 8000c0e:	bb63      	cbnz	r3, 8000c6a <HAL_RCC_OscConfig+0x3d6>
 8000c10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c14:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000c18:	6a1a      	ldr	r2, [r3, #32]
 8000c1a:	f022 0201 	bic.w	r2, r2, #1
 8000c1e:	621a      	str	r2, [r3, #32]
 8000c20:	6a1a      	ldr	r2, [r3, #32]
 8000c22:	f022 0204 	bic.w	r2, r2, #4
 8000c26:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c28:	68a3      	ldr	r3, [r4, #8]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d05b      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c2e:	f7ff fc3f 	bl	80004b0 <HAL_GetTick>
 8000c32:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c34:	e045      	b.n	8000cc2 <HAL_RCC_OscConfig+0x42e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c36:	4a97      	ldr	r2, [pc, #604]	; (8000e94 <HAL_RCC_OscConfig+0x600>)
 8000c38:	6813      	ldr	r3, [r2, #0]
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000c40:	f7ff fc36 	bl	80004b0 <HAL_GetTick>
 8000c44:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c46:	4b93      	ldr	r3, [pc, #588]	; (8000e94 <HAL_RCC_OscConfig+0x600>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000c4e:	d1db      	bne.n	8000c08 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c50:	f7ff fc2e 	bl	80004b0 <HAL_GetTick>
 8000c54:	1b80      	subs	r0, r0, r6
 8000c56:	2864      	cmp	r0, #100	; 0x64
 8000c58:	d9f5      	bls.n	8000c46 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	e123      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c5e:	4a8c      	ldr	r2, [pc, #560]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000c60:	6a13      	ldr	r3, [r2, #32]
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6213      	str	r3, [r2, #32]
 8000c68:	e7de      	b.n	8000c28 <HAL_RCC_OscConfig+0x394>
 8000c6a:	2b05      	cmp	r3, #5
 8000c6c:	d009      	beq.n	8000c82 <HAL_RCC_OscConfig+0x3ee>
 8000c6e:	4b88      	ldr	r3, [pc, #544]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000c70:	6a1a      	ldr	r2, [r3, #32]
 8000c72:	f022 0201 	bic.w	r2, r2, #1
 8000c76:	621a      	str	r2, [r3, #32]
 8000c78:	6a1a      	ldr	r2, [r3, #32]
 8000c7a:	f022 0204 	bic.w	r2, r2, #4
 8000c7e:	621a      	str	r2, [r3, #32]
 8000c80:	e7d2      	b.n	8000c28 <HAL_RCC_OscConfig+0x394>
 8000c82:	4b83      	ldr	r3, [pc, #524]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000c84:	6a1a      	ldr	r2, [r3, #32]
 8000c86:	f042 0204 	orr.w	r2, r2, #4
 8000c8a:	621a      	str	r2, [r3, #32]
 8000c8c:	6a1a      	ldr	r2, [r3, #32]
 8000c8e:	f042 0201 	orr.w	r2, r2, #1
 8000c92:	621a      	str	r2, [r3, #32]
 8000c94:	e7c8      	b.n	8000c28 <HAL_RCC_OscConfig+0x394>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c96:	4b7e      	ldr	r3, [pc, #504]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000c98:	6a19      	ldr	r1, [r3, #32]
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	fa93 f3a3 	rbit	r3, r3
 8000ca0:	fab3 f383 	clz	r3, r3
 8000ca4:	f003 031f 	and.w	r3, r3, #31
 8000ca8:	2201      	movs	r2, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	4219      	tst	r1, r3
 8000cb0:	d145      	bne.n	8000d3e <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cb2:	f7ff fbfd 	bl	80004b0 <HAL_GetTick>
 8000cb6:	1b80      	subs	r0, r0, r6
 8000cb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	f200 80ed 	bhi.w	8000e9c <HAL_RCC_OscConfig+0x608>
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	fa93 f2a3 	rbit	r2, r3
 8000cc8:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ccc:	fab3 f383 	clz	r3, r3
 8000cd0:	095b      	lsrs	r3, r3, #5
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d0dd      	beq.n	8000c96 <HAL_RCC_OscConfig+0x402>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	fa93 f3a3 	rbit	r3, r3
 8000ce0:	4b6b      	ldr	r3, [pc, #428]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000ce2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000ce4:	e7d9      	b.n	8000c9a <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ce6:	f7ff fbe3 	bl	80004b0 <HAL_GetTick>
 8000cea:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cec:	e015      	b.n	8000d1a <HAL_RCC_OscConfig+0x486>
 8000cee:	4b68      	ldr	r3, [pc, #416]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000cf0:	6a19      	ldr	r1, [r3, #32]
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	fa93 f3a3 	rbit	r3, r3
 8000cf8:	fab3 f383 	clz	r3, r3
 8000cfc:	f003 031f 	and.w	r3, r3, #31
 8000d00:	2201      	movs	r2, #1
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	4219      	tst	r1, r3
 8000d08:	d019      	beq.n	8000d3e <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d0a:	f7ff fbd1 	bl	80004b0 <HAL_GetTick>
 8000d0e:	1b80      	subs	r0, r0, r6
 8000d10:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80c3 	bhi.w	8000ea0 <HAL_RCC_OscConfig+0x60c>
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	fa93 f2a3 	rbit	r2, r3
 8000d20:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d24:	fab3 f383 	clz	r3, r3
 8000d28:	095b      	lsrs	r3, r3, #5
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d0dd      	beq.n	8000cee <HAL_RCC_OscConfig+0x45a>
 8000d32:	2302      	movs	r3, #2
 8000d34:	fa93 f3a3 	rbit	r3, r3
 8000d38:	4b55      	ldr	r3, [pc, #340]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000d3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d3c:	e7d9      	b.n	8000cf2 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000d3e:	bbb5      	cbnz	r5, 8000dae <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d40:	69a3      	ldr	r3, [r4, #24]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 80ae 	beq.w	8000ea4 <HAL_RCC_OscConfig+0x610>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d48:	4a51      	ldr	r2, [pc, #324]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000d4a:	6852      	ldr	r2, [r2, #4]
 8000d4c:	f002 020c 	and.w	r2, r2, #12
 8000d50:	2a08      	cmp	r2, #8
 8000d52:	f000 80aa 	beq.w	8000eaa <HAL_RCC_OscConfig+0x616>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d02f      	beq.n	8000dba <HAL_RCC_OscConfig+0x526>
 8000d5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d5e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d62:	fab3 f383 	clz	r3, r3
 8000d66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fb9c 	bl	80004b0 <HAL_GetTick>
 8000d78:	4604      	mov	r4, r0
 8000d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d7e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d82:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000d84:	6819      	ldr	r1, [r3, #0]
 8000d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d8a:	fa93 f3a3 	rbit	r3, r3
 8000d8e:	fab3 f383 	clz	r3, r3
 8000d92:	f003 031f 	and.w	r3, r3, #31
 8000d96:	2201      	movs	r2, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	4219      	tst	r1, r3
 8000d9e:	d071      	beq.n	8000e84 <HAL_RCC_OscConfig+0x5f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000da0:	f7ff fb86 	bl	80004b0 <HAL_GetTick>
 8000da4:	1b00      	subs	r0, r0, r4
 8000da6:	2802      	cmp	r0, #2
 8000da8:	d9e7      	bls.n	8000d7a <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 8000daa:	2003      	movs	r0, #3
 8000dac:	e07b      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dae:	4a38      	ldr	r2, [pc, #224]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000db0:	69d3      	ldr	r3, [r2, #28]
 8000db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000db6:	61d3      	str	r3, [r2, #28]
 8000db8:	e7c2      	b.n	8000d40 <HAL_RCC_OscConfig+0x4ac>
 8000dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dbe:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000dc2:	fab3 f383 	clz	r3, r3
 8000dc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000dca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fb6c 	bl	80004b0 <HAL_GetTick>
 8000dd8:	4605      	mov	r5, r0
 8000dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dde:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000de4:	6819      	ldr	r1, [r3, #0]
 8000de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dea:	fa93 f3a3 	rbit	r3, r3
 8000dee:	fab3 f383 	clz	r3, r3
 8000df2:	f003 031f 	and.w	r3, r3, #31
 8000df6:	2201      	movs	r2, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	4219      	tst	r1, r3
 8000dfe:	d006      	beq.n	8000e0e <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e00:	f7ff fb56 	bl	80004b0 <HAL_GetTick>
 8000e04:	1b40      	subs	r0, r0, r5
 8000e06:	2802      	cmp	r0, #2
 8000e08:	d9e7      	bls.n	8000dda <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	e04b      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e0e:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000e10:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000e12:	f023 030f 	bic.w	r3, r3, #15
 8000e16:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e1c:	6853      	ldr	r3, [r2, #4]
 8000e1e:	f423 1376 	bic.w	r3, r3, #4030464	; 0x3d8000
 8000e22:	6a21      	ldr	r1, [r4, #32]
 8000e24:	69e0      	ldr	r0, [r4, #28]
 8000e26:	4301      	orrs	r1, r0
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	6053      	str	r3, [r2, #4]
 8000e2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e30:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000e34:	fab3 f383 	clz	r3, r3
 8000e38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e46:	f7ff fb33 	bl	80004b0 <HAL_GetTick>
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e50:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_RCC_OscConfig+0x5fc>)
 8000e56:	6819      	ldr	r1, [r3, #0]
 8000e58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e5c:	fa93 f3a3 	rbit	r3, r3
 8000e60:	fab3 f383 	clz	r3, r3
 8000e64:	f003 031f 	and.w	r3, r3, #31
 8000e68:	2201      	movs	r2, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	4219      	tst	r1, r3
 8000e70:	d106      	bne.n	8000e80 <HAL_RCC_OscConfig+0x5ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e72:	f7ff fb1d 	bl	80004b0 <HAL_GetTick>
 8000e76:	1b00      	subs	r0, r0, r4
 8000e78:	2802      	cmp	r0, #2
 8000e7a:	d9e7      	bls.n	8000e4c <HAL_RCC_OscConfig+0x5b8>
            return HAL_TIMEOUT;
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	e012      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000e80:	2000      	movs	r0, #0
 8000e82:	e010      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
 8000e84:	2000      	movs	r0, #0
 8000e86:	e00e      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
    return HAL_ERROR;
 8000e88:	2001      	movs	r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	10908120 	.word	0x10908120
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40007000 	.word	0x40007000
        return HAL_ERROR;
 8000e98:	2001      	movs	r0, #1
 8000e9a:	e004      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
          return HAL_TIMEOUT;
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	e002      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
          return HAL_TIMEOUT;
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	e000      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 8000ea4:	2000      	movs	r0, #0
}
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000eaa:	2001      	movs	r0, #1
 8000eac:	e7fb      	b.n	8000ea6 <HAL_RCC_OscConfig+0x612>
 8000eae:	bf00      	nop

08000eb0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <HAL_RCC_GetSysClockFreq+0x64>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000eb4:	f003 020c 	and.w	r2, r3, #12
 8000eb8:	2a08      	cmp	r2, #8
 8000eba:	d129      	bne.n	8000f10 <HAL_RCC_GetSysClockFreq+0x60>
{
 8000ebc:	b410      	push	{r4}
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000ebe:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8000ec2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000ec6:	fa92 f2a2 	rbit	r2, r2
 8000eca:	fab2 f282 	clz	r2, r2
 8000ece:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed2:	4c11      	ldr	r4, [pc, #68]	; (8000f18 <HAL_RCC_GetSysClockFreq+0x68>)
 8000ed4:	5ca0      	ldrb	r0, [r4, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_RCC_GetSysClockFreq+0x64>)
 8000ed8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000eda:	f002 020f 	and.w	r2, r2, #15
 8000ede:	210f      	movs	r1, #15
 8000ee0:	fa91 f1a1 	rbit	r1, r1
 8000ee4:	fab1 f181 	clz	r1, r1
 8000ee8:	40ca      	lsrs	r2, r1
 8000eea:	4422      	add	r2, r4
 8000eec:	7c12      	ldrb	r2, [r2, #16]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8000eee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ef2:	d107      	bne.n	8000f04 <HAL_RCC_GetSysClockFreq+0x54>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000ef6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000efa:	fb03 f000 	mul.w	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f02:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f0a:	fb03 f000 	mul.w	r0, r3, r0
 8000f0e:	e7f6      	b.n	8000efe <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000f12:	4770      	bx	lr
 8000f14:	40021000 	.word	0x40021000
 8000f18:	08001450 	.word	0x08001450
 8000f1c:	007a1200 	.word	0x007a1200

08000f20 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000f20:	2800      	cmp	r0, #0
 8000f22:	f000 80c0 	beq.w	80010a6 <HAL_RCC_ClockConfig+0x186>
{
 8000f26:	b570      	push	{r4, r5, r6, lr}
 8000f28:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f2a:	4b61      	ldr	r3, [pc, #388]	; (80010b0 <HAL_RCC_ClockConfig+0x190>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d20c      	bcs.n	8000f50 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f36:	4a5e      	ldr	r2, [pc, #376]	; (80010b0 <HAL_RCC_ClockConfig+0x190>)
 8000f38:	6813      	ldr	r3, [r2, #0]
 8000f3a:	f023 0307 	bic.w	r3, r3, #7
 8000f3e:	430b      	orrs	r3, r1
 8000f40:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	4299      	cmp	r1, r3
 8000f4a:	d001      	beq.n	8000f50 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	f013 0f02 	tst.w	r3, #2
 8000f56:	d006      	beq.n	8000f66 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f58:	4a56      	ldr	r2, [pc, #344]	; (80010b4 <HAL_RCC_ClockConfig+0x194>)
 8000f5a:	6853      	ldr	r3, [r2, #4]
 8000f5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f60:	68a0      	ldr	r0, [r4, #8]
 8000f62:	4303      	orrs	r3, r0
 8000f64:	6053      	str	r3, [r2, #4]
 8000f66:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	f013 0f01 	tst.w	r3, #1
 8000f6e:	d05a      	beq.n	8001026 <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f70:	6863      	ldr	r3, [r4, #4]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d02d      	beq.n	8000fd2 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d040      	beq.n	8000ffc <HAL_RCC_ClockConfig+0xdc>
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f80:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <HAL_RCC_ClockConfig+0x194>)
 8000f82:	6810      	ldr	r0, [r2, #0]
 8000f84:	2202      	movs	r2, #2
 8000f86:	fa92 f2a2 	rbit	r2, r2
 8000f8a:	fab2 f282 	clz	r2, r2
 8000f8e:	f002 021f 	and.w	r2, r2, #31
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f202 	lsl.w	r2, r1, r2
 8000f98:	4210      	tst	r0, r2
 8000f9a:	f000 8086 	beq.w	80010aa <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f9e:	4945      	ldr	r1, [pc, #276]	; (80010b4 <HAL_RCC_ClockConfig+0x194>)
 8000fa0:	684a      	ldr	r2, [r1, #4]
 8000fa2:	f022 0203 	bic.w	r2, r2, #3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000faa:	f7ff fa81 	bl	80004b0 <HAL_GetTick>
 8000fae:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fb0:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <HAL_RCC_ClockConfig+0x194>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	6862      	ldr	r2, [r4, #4]
 8000fba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000fbe:	d032      	beq.n	8001026 <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fc0:	f7ff fa76 	bl	80004b0 <HAL_GetTick>
 8000fc4:	1b80      	subs	r0, r0, r6
 8000fc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fca:	4298      	cmp	r0, r3
 8000fcc:	d9f0      	bls.n	8000fb0 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8000fce:	2003      	movs	r0, #3
 8000fd0:	bd70      	pop	{r4, r5, r6, pc}
 8000fd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fd6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	4a36      	ldr	r2, [pc, #216]	; (80010b4 <HAL_RCC_ClockConfig+0x194>)
 8000fdc:	6810      	ldr	r0, [r2, #0]
 8000fde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fe2:	fa92 f2a2 	rbit	r2, r2
 8000fe6:	fab2 f282 	clz	r2, r2
 8000fea:	f002 021f 	and.w	r2, r2, #31
 8000fee:	2101      	movs	r1, #1
 8000ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff4:	4210      	tst	r0, r2
 8000ff6:	d1d2      	bne.n	8000f9e <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	bd70      	pop	{r4, r5, r6, pc}
 8000ffc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001000:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001004:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <HAL_RCC_ClockConfig+0x194>)
 8001006:	6810      	ldr	r0, [r2, #0]
 8001008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800100c:	fa92 f2a2 	rbit	r2, r2
 8001010:	fab2 f282 	clz	r2, r2
 8001014:	f002 021f 	and.w	r2, r2, #31
 8001018:	2101      	movs	r1, #1
 800101a:	fa01 f202 	lsl.w	r2, r1, r2
 800101e:	4210      	tst	r0, r2
 8001020:	d1bd      	bne.n	8000f9e <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8001022:	2001      	movs	r0, #1
 8001024:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_RCC_ClockConfig+0x190>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	429d      	cmp	r5, r3
 8001030:	d20c      	bcs.n	800104c <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001032:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <HAL_RCC_ClockConfig+0x190>)
 8001034:	6813      	ldr	r3, [r2, #0]
 8001036:	f023 0307 	bic.w	r3, r3, #7
 800103a:	432b      	orrs	r3, r5
 800103c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	429d      	cmp	r5, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8001048:	2001      	movs	r0, #1
}
 800104a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	f013 0f04 	tst.w	r3, #4
 8001052:	d006      	beq.n	8001062 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001054:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <HAL_RCC_ClockConfig+0x194>)
 8001056:	6853      	ldr	r3, [r2, #4]
 8001058:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800105c:	68e1      	ldr	r1, [r4, #12]
 800105e:	430b      	orrs	r3, r1
 8001060:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	f013 0f08 	tst.w	r3, #8
 8001068:	d007      	beq.n	800107a <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <HAL_RCC_ClockConfig+0x194>)
 800106c:	6853      	ldr	r3, [r2, #4]
 800106e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001072:	6921      	ldr	r1, [r4, #16]
 8001074:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001078:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800107a:	f7ff ff19 	bl	8000eb0 <HAL_RCC_GetSysClockFreq>
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_RCC_ClockConfig+0x194>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001086:	22f0      	movs	r2, #240	; 0xf0
 8001088:	fa92 f2a2 	rbit	r2, r2
 800108c:	fab2 f282 	clz	r2, r2
 8001090:	40d3      	lsrs	r3, r2
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <HAL_RCC_ClockConfig+0x198>)
 8001094:	5cd3      	ldrb	r3, [r2, r3]
 8001096:	40d8      	lsrs	r0, r3
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_RCC_ClockConfig+0x19c>)
 800109a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff f9c5 	bl	800042c <HAL_InitTick>
  return HAL_OK;
 80010a2:	2000      	movs	r0, #0
 80010a4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80010a6:	2001      	movs	r0, #1
 80010a8:	4770      	bx	lr
        return HAL_ERROR;
 80010aa:	2001      	movs	r0, #1
 80010ac:	bd70      	pop	{r4, r5, r6, pc}
 80010ae:	bf00      	nop
 80010b0:	40022000 	.word	0x40022000
 80010b4:	40021000 	.word	0x40021000
 80010b8:	08001438 	.word	0x08001438
 80010bc:	20000000 	.word	0x20000000

080010c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80010c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c2:	b083      	sub	sp, #12
 80010c4:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80010c6:	6803      	ldr	r3, [r0, #0]
 80010c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80010cc:	d048      	beq.n	8001160 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ce:	4ba1      	ldr	r3, [pc, #644]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010d6:	f040 8122 	bne.w	800131e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b9e      	ldr	r3, [pc, #632]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80010dc:	69da      	ldr	r2, [r3, #28]
 80010de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010e2:	61da      	str	r2, [r3, #28]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010ee:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f0:	4b99      	ldr	r3, [pc, #612]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010f8:	f000 8113 	beq.w	8001322 <HAL_RCCEx_PeriphCLKConfig+0x262>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010fc:	4b95      	ldr	r3, [pc, #596]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80010fe:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001100:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001104:	d022      	beq.n	800114c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8001106:	6862      	ldr	r2, [r4, #4]
 8001108:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800110c:	4293      	cmp	r3, r2
 800110e:	d01d      	beq.n	800114c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001110:	4890      	ldr	r0, [pc, #576]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001112:	6a01      	ldr	r1, [r0, #32]
 8001114:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001118:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800111c:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001120:	fab2 f282 	clz	r2, r2
 8001124:	4f8d      	ldr	r7, [pc, #564]	; (800135c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001126:	443a      	add	r2, r7
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	f04f 0e01 	mov.w	lr, #1
 800112e:	f8c2 e000 	str.w	lr, [r2]
 8001132:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	443b      	add	r3, r7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001142:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001144:	f011 0f01 	tst.w	r1, #1
 8001148:	f040 8100 	bne.w	800134c <HAL_RCCEx_PeriphCLKConfig+0x28c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800114c:	4a81      	ldr	r2, [pc, #516]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800114e:	6a13      	ldr	r3, [r2, #32]
 8001150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001154:	6861      	ldr	r1, [r4, #4]
 8001156:	430b      	orrs	r3, r1
 8001158:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800115a:	2d00      	cmp	r5, #0
 800115c:	f040 8128 	bne.w	80013b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	f013 0f01 	tst.w	r3, #1
 8001166:	d006      	beq.n	8001176 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001168:	4a7a      	ldr	r2, [pc, #488]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800116a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800116c:	f023 0303 	bic.w	r3, r3, #3
 8001170:	68a1      	ldr	r1, [r4, #8]
 8001172:	430b      	orrs	r3, r1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	f013 0f02 	tst.w	r3, #2
 800117c:	d006      	beq.n	800118c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800117e:	4a75      	ldr	r2, [pc, #468]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001180:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001182:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001186:	68e1      	ldr	r1, [r4, #12]
 8001188:	430b      	orrs	r3, r1
 800118a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	f013 0f04 	tst.w	r3, #4
 8001192:	d006      	beq.n	80011a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001194:	4a6f      	ldr	r2, [pc, #444]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001196:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001198:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800119c:	6921      	ldr	r1, [r4, #16]
 800119e:	430b      	orrs	r3, r1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	f013 0f20 	tst.w	r3, #32
 80011a8:	d006      	beq.n	80011b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80011aa:	4a6a      	ldr	r2, [pc, #424]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80011ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011ae:	f023 0310 	bic.w	r3, r3, #16
 80011b2:	69e1      	ldr	r1, [r4, #28]
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011be:	d006      	beq.n	80011ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80011c0:	4a64      	ldr	r2, [pc, #400]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80011c2:	6853      	ldr	r3, [r2, #4]
 80011c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011c8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80011ca:	430b      	orrs	r3, r1
 80011cc:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80011d4:	d006      	beq.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80011d6:	4a5f      	ldr	r2, [pc, #380]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80011d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011da:	f023 0320 	bic.w	r3, r3, #32
 80011de:	6a21      	ldr	r1, [r4, #32]
 80011e0:	430b      	orrs	r3, r1
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80011ea:	d006      	beq.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80011ec:	4a59      	ldr	r2, [pc, #356]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80011ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011f6:	430b      	orrs	r3, r1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	f013 0f08 	tst.w	r3, #8
 8001200:	d006      	beq.n	8001210 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001202:	4a54      	ldr	r2, [pc, #336]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001204:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001206:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800120a:	6961      	ldr	r1, [r4, #20]
 800120c:	430b      	orrs	r3, r1
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	f013 0f10 	tst.w	r3, #16
 8001216:	d006      	beq.n	8001226 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001218:	4a4e      	ldr	r2, [pc, #312]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800121a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800121c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001220:	69a1      	ldr	r1, [r4, #24]
 8001222:	430b      	orrs	r3, r1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001226:	6823      	ldr	r3, [r4, #0]
 8001228:	f413 7f00 	tst.w	r3, #512	; 0x200
 800122c:	d006      	beq.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800122e:	4a49      	ldr	r2, [pc, #292]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001230:	6853      	ldr	r3, [r2, #4]
 8001232:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001236:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001238:	430b      	orrs	r3, r1
 800123a:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001242:	d006      	beq.n	8001252 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001244:	4a43      	ldr	r2, [pc, #268]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001246:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001248:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800124c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800124e:	430b      	orrs	r3, r1
 8001250:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001258:	d006      	beq.n	8001268 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800125a:	4a3e      	ldr	r2, [pc, #248]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800125c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800125e:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001262:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001264:	430b      	orrs	r3, r1
 8001266:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800126e:	d006      	beq.n	800127e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001270:	4a38      	ldr	r2, [pc, #224]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001272:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800127a:	430b      	orrs	r3, r1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001284:	d006      	beq.n	8001294 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001286:	4a33      	ldr	r2, [pc, #204]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001288:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800128a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800128e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001290:	430b      	orrs	r3, r1
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800129a:	d006      	beq.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800129c:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800129e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80012a6:	430b      	orrs	r3, r1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80012b0:	d006      	beq.n	80012c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80012b2:	4a28      	ldr	r2, [pc, #160]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80012b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80012ba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80012bc:	430b      	orrs	r3, r1
 80012be:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012c6:	d006      	beq.n	80012d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80012c8:	4a22      	ldr	r2, [pc, #136]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80012ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80012d2:	430b      	orrs	r3, r1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80012dc:	d006      	beq.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80012de:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80012e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80012e8:	430b      	orrs	r3, r1
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80012f2:	d006      	beq.n	8001302 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80012f4:	4a17      	ldr	r2, [pc, #92]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80012f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012fc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80012fe:	430b      	orrs	r3, r1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001308:	d059      	beq.n	80013be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800130c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800130e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001312:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001314:	430b      	orrs	r3, r1
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001318:	2000      	movs	r0, #0
}
 800131a:	b003      	add	sp, #12
 800131c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 800131e:	2500      	movs	r5, #0
 8001320:	e6e6      	b.n	80010f0 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001324:	6813      	ldr	r3, [r2, #0]
 8001326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800132c:	f7ff f8c0 	bl	80004b0 <HAL_GetTick>
 8001330:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f413 7f80 	tst.w	r3, #256	; 0x100
 800133a:	f47f aedf 	bne.w	80010fc <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff f8b7 	bl	80004b0 <HAL_GetTick>
 8001342:	1b80      	subs	r0, r0, r6
 8001344:	2864      	cmp	r0, #100	; 0x64
 8001346:	d9f4      	bls.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x272>
          return HAL_TIMEOUT;
 8001348:	2003      	movs	r0, #3
 800134a:	e7e6      	b.n	800131a <HAL_RCCEx_PeriphCLKConfig+0x25a>
        tickstart = HAL_GetTick();
 800134c:	f7ff f8b0 	bl	80004b0 <HAL_GetTick>
 8001350:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001352:	e01b      	b.n	800138c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8001354:	40021000 	.word	0x40021000
 8001358:	40007000 	.word	0x40007000
 800135c:	10908100 	.word	0x10908100
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001362:	6a19      	ldr	r1, [r3, #32]
 8001364:	2302      	movs	r3, #2
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	2201      	movs	r2, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	4219      	tst	r1, r3
 800137a:	f47f aee7 	bne.w	800114c <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	f7ff f897 	bl	80004b0 <HAL_GetTick>
 8001382:	1b80      	subs	r0, r0, r6
 8001384:	f241 3388 	movw	r3, #5000	; 0x1388
 8001388:	4298      	cmp	r0, r3
 800138a:	d816      	bhi.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800138c:	2302      	movs	r3, #2
 800138e:	fa93 f2a3 	rbit	r2, r3
 8001392:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d0dd      	beq.n	8001360 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 80013a4:	2302      	movs	r3, #2
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80013ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80013ae:	e7d9      	b.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b0:	69d3      	ldr	r3, [r2, #28]
 80013b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b6:	61d3      	str	r3, [r2, #28]
 80013b8:	e6d2      	b.n	8001160 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 80013ba:	2003      	movs	r0, #3
 80013bc:	e7ad      	b.n	800131a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  return HAL_OK;
 80013be:	2000      	movs	r0, #0
 80013c0:	e7ab      	b.n	800131a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000

080013c8 <__libc_init_array>:
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	4e0d      	ldr	r6, [pc, #52]	; (8001400 <__libc_init_array+0x38>)
 80013cc:	4c0d      	ldr	r4, [pc, #52]	; (8001404 <__libc_init_array+0x3c>)
 80013ce:	1ba4      	subs	r4, r4, r6
 80013d0:	10a4      	asrs	r4, r4, #2
 80013d2:	2500      	movs	r5, #0
 80013d4:	42a5      	cmp	r5, r4
 80013d6:	d109      	bne.n	80013ec <__libc_init_array+0x24>
 80013d8:	4e0b      	ldr	r6, [pc, #44]	; (8001408 <__libc_init_array+0x40>)
 80013da:	4c0c      	ldr	r4, [pc, #48]	; (800140c <__libc_init_array+0x44>)
 80013dc:	f000 f820 	bl	8001420 <_init>
 80013e0:	1ba4      	subs	r4, r4, r6
 80013e2:	10a4      	asrs	r4, r4, #2
 80013e4:	2500      	movs	r5, #0
 80013e6:	42a5      	cmp	r5, r4
 80013e8:	d105      	bne.n	80013f6 <__libc_init_array+0x2e>
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
 80013ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013f0:	4798      	blx	r3
 80013f2:	3501      	adds	r5, #1
 80013f4:	e7ee      	b.n	80013d4 <__libc_init_array+0xc>
 80013f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013fa:	4798      	blx	r3
 80013fc:	3501      	adds	r5, #1
 80013fe:	e7f2      	b.n	80013e6 <__libc_init_array+0x1e>
 8001400:	08001470 	.word	0x08001470
 8001404:	08001470 	.word	0x08001470
 8001408:	08001470 	.word	0x08001470
 800140c:	08001474 	.word	0x08001474

08001410 <memset>:
 8001410:	4402      	add	r2, r0
 8001412:	4603      	mov	r3, r0
 8001414:	4293      	cmp	r3, r2
 8001416:	d100      	bne.n	800141a <memset+0xa>
 8001418:	4770      	bx	lr
 800141a:	f803 1b01 	strb.w	r1, [r3], #1
 800141e:	e7f9      	b.n	8001414 <memset+0x4>

08001420 <_init>:
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001422:	bf00      	nop
 8001424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001426:	bc08      	pop	{r3}
 8001428:	469e      	mov	lr, r3
 800142a:	4770      	bx	lr

0800142c <_fini>:
 800142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142e:	bf00      	nop
 8001430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001432:	bc08      	pop	{r3}
 8001434:	469e      	mov	lr, r3
 8001436:	4770      	bx	lr
